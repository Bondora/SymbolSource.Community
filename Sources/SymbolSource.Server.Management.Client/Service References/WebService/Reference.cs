//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SymbolSource.Server.Management.Client {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Caller", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Caller : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyType {
            get {
                return this.KeyTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyTypeField, value) != true)) {
                    this.KeyTypeField = value;
                    this.RaisePropertyChanged("KeyType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyValue {
            get {
                return this.KeyValueField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyValueField, value) != true)) {
                    this.KeyValueField = value;
                    this.RaisePropertyChanged("KeyValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageFile", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class ImageFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BinaryHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BinaryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatformField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.Reference ReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BinaryHash {
            get {
                return this.BinaryHashField;
            }
            set {
                if ((object.ReferenceEquals(this.BinaryHashField, value) != true)) {
                    this.BinaryHashField = value;
                    this.RaisePropertyChanged("BinaryHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BinaryType {
            get {
                return this.BinaryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.BinaryTypeField, value) != true)) {
                    this.BinaryTypeField = value;
                    this.RaisePropertyChanged("BinaryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentationType {
            get {
                return this.DocumentationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentationTypeField, value) != true)) {
                    this.DocumentationTypeField = value;
                    this.RaisePropertyChanged("DocumentationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileVersion {
            get {
                return this.FileVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.FileVersionField, value) != true)) {
                    this.FileVersionField = value;
                    this.RaisePropertyChanged("FileVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeField, value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Platform {
            get {
                return this.PlatformField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatformField, value) != true)) {
                    this.PlatformField = value;
                    this.RaisePropertyChanged("Platform");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.Reference Reference {
            get {
                return this.ReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceField, value) != true)) {
                    this.ReferenceField = value;
                    this.RaisePropertyChanged("Reference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolHash {
            get {
                return this.SymbolHashField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolHashField, value) != true)) {
                    this.SymbolHashField = value;
                    this.RaisePropertyChanged("SymbolHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolType {
            get {
                return this.SymbolTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolTypeField, value) != true)) {
                    this.SymbolTypeField = value;
                    this.RaisePropertyChanged("SymbolType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Reference", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SymbolSource.Server.Management.Client.Depedency))]
    public partial class Reference : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CultureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicKeyTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Culture {
            get {
                return this.CultureField;
            }
            set {
                if ((object.ReferenceEquals(this.CultureField, value) != true)) {
                    this.CultureField = value;
                    this.RaisePropertyChanged("Culture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicKeyToken {
            get {
                return this.PublicKeyTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicKeyTokenField, value) != true)) {
                    this.PublicKeyTokenField = value;
                    this.RaisePropertyChanged("PublicKeyToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Depedency", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Depedency : SymbolSource.Server.Management.Client.Reference {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SourceFile", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class SourceFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatformField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hash {
            get {
                return this.HashField;
            }
            set {
                if ((object.ReferenceEquals(this.HashField, value) != true)) {
                    this.HashField = value;
                    this.RaisePropertyChanged("Hash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeField, value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalPath {
            get {
                return this.OriginalPathField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalPathField, value) != true)) {
                    this.OriginalPathField = value;
                    this.RaisePropertyChanged("OriginalPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Platform {
            get {
                return this.PlatformField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatformField, value) != true)) {
                    this.PlatformField = value;
                    this.RaisePropertyChanged("Platform");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Version", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Version : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanCreateCompilationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanGrantPermissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanHideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanRestoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HiddenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.MetadataEntry[] MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreateCompilation {
            get {
                return this.CanCreateCompilationField;
            }
            set {
                if ((this.CanCreateCompilationField.Equals(value) != true)) {
                    this.CanCreateCompilationField = value;
                    this.RaisePropertyChanged("CanCreateCompilation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanEdit {
            get {
                return this.CanEditField;
            }
            set {
                if ((this.CanEditField.Equals(value) != true)) {
                    this.CanEditField = value;
                    this.RaisePropertyChanged("CanEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanGrantPermission {
            get {
                return this.CanGrantPermissionField;
            }
            set {
                if ((this.CanGrantPermissionField.Equals(value) != true)) {
                    this.CanGrantPermissionField = value;
                    this.RaisePropertyChanged("CanGrantPermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanHide {
            get {
                return this.CanHideField;
            }
            set {
                if ((this.CanHideField.Equals(value) != true)) {
                    this.CanHideField = value;
                    this.RaisePropertyChanged("CanHide");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanRestore {
            get {
                return this.CanRestoreField;
            }
            set {
                if ((this.CanRestoreField.Equals(value) != true)) {
                    this.CanRestoreField = value;
                    this.RaisePropertyChanged("CanRestore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hidden {
            get {
                return this.HiddenField;
            }
            set {
                if ((this.HiddenField.Equals(value) != true)) {
                    this.HiddenField = value;
                    this.RaisePropertyChanged("Hidden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.MetadataEntry[] Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageFormat {
            get {
                return this.PackageFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageFormatField, value) != true)) {
                    this.PackageFormatField = value;
                    this.RaisePropertyChanged("PackageFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageHash {
            get {
                return this.PackageHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageHashField, value) != true)) {
                    this.PackageHashField = value;
                    this.RaisePropertyChanged("PackageHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MetadataEntry", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class MetadataEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Repository", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Repository : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanCreateProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanGrantPermissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.MetadataEntry[] MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreateProject {
            get {
                return this.CanCreateProjectField;
            }
            set {
                if ((this.CanCreateProjectField.Equals(value) != true)) {
                    this.CanCreateProjectField = value;
                    this.RaisePropertyChanged("CanCreateProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanEdit {
            get {
                return this.CanEditField;
            }
            set {
                if ((this.CanEditField.Equals(value) != true)) {
                    this.CanEditField = value;
                    this.RaisePropertyChanged("CanEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanGrantPermission {
            get {
                return this.CanGrantPermissionField;
            }
            set {
                if ((this.CanGrantPermissionField.Equals(value) != true)) {
                    this.CanGrantPermissionField = value;
                    this.RaisePropertyChanged("CanGrantPermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.MetadataEntry[] Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanCreateVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanGrantPermissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.MetadataEntry[] MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreateVersion {
            get {
                return this.CanCreateVersionField;
            }
            set {
                if ((this.CanCreateVersionField.Equals(value) != true)) {
                    this.CanCreateVersionField = value;
                    this.RaisePropertyChanged("CanCreateVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanEdit {
            get {
                return this.CanEditField;
            }
            set {
                if ((this.CanEditField.Equals(value) != true)) {
                    this.CanEditField = value;
                    this.RaisePropertyChanged("CanEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanGrantPermission {
            get {
                return this.CanGrantPermissionField;
            }
            set {
                if ((this.CanGrantPermissionField.Equals(value) != true)) {
                    this.CanGrantPermissionField = value;
                    this.RaisePropertyChanged("CanGrantPermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.MetadataEntry[] Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageFilter", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class PackageFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PerformedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SkipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TakeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WhereField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderBy {
            get {
                return this.OrderByField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderByField, value) != true)) {
                    this.OrderByField = value;
                    this.RaisePropertyChanged("OrderBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Performed {
            get {
                return this.PerformedField;
            }
            set {
                if ((this.PerformedField.Equals(value) != true)) {
                    this.PerformedField = value;
                    this.RaisePropertyChanged("Performed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Skip {
            get {
                return this.SkipField;
            }
            set {
                if ((this.SkipField.Equals(value) != true)) {
                    this.SkipField = value;
                    this.RaisePropertyChanged("Skip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Take {
            get {
                return this.TakeField;
            }
            set {
                if ((this.TakeField.Equals(value) != true)) {
                    this.TakeField = value;
                    this.RaisePropertyChanged("Take");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Where {
            get {
                return this.WhereField;
            }
            set {
                if ((object.ReferenceEquals(this.WhereField, value) != true)) {
                    this.WhereField = value;
                    this.RaisePropertyChanged("Where");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Compilation", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Compilation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.MetadataEntry[] MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatformField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.MetadataEntry[] Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeField, value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Platform {
            get {
                return this.PlatformField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatformField, value) != true)) {
                    this.PlatformField = value;
                    this.RaisePropertyChanged("Platform");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Profile {
            get {
                return this.ProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfileField, value) != true)) {
                    this.ProfileField = value;
                    this.RaisePropertyChanged("Profile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeImageFile", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class NodeImageFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.CodeBlockAddress[] CodeBlockAddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatformField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.CodeBlockAddress[] CodeBlockAddresses {
            get {
                return this.CodeBlockAddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeBlockAddressesField, value) != true)) {
                    this.CodeBlockAddressesField = value;
                    this.RaisePropertyChanged("CodeBlockAddresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fullname {
            get {
                return this.FullnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullnameField, value) != true)) {
                    this.FullnameField = value;
                    this.RaisePropertyChanged("Fullname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeField, value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Modifier {
            get {
                return this.ModifierField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifierField, value) != true)) {
                    this.ModifierField = value;
                    this.RaisePropertyChanged("Modifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Platform {
            get {
                return this.PlatformField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatformField, value) != true)) {
                    this.PlatformField = value;
                    this.RaisePropertyChanged("Platform");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CodeBlockAddress", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class CodeBlockAddress : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.Location EndPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.SourceFile SourceFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.Location StartPositionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.Location EndPosition {
            get {
                return this.EndPositionField;
            }
            set {
                if ((object.ReferenceEquals(this.EndPositionField, value) != true)) {
                    this.EndPositionField = value;
                    this.RaisePropertyChanged("EndPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.SourceFile SourceFile {
            get {
                return this.SourceFileField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceFileField, value) != true)) {
                    this.SourceFileField = value;
                    this.RaisePropertyChanged("SourceFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.Location StartPosition {
            get {
                return this.StartPositionField;
            }
            set {
                if ((object.ReferenceEquals(this.StartPositionField, value) != true)) {
                    this.StartPositionField = value;
                    this.RaisePropertyChanged("StartPosition");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LineField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Column {
            get {
                return this.ColumnField;
            }
            set {
                if ((this.ColumnField.Equals(value) != true)) {
                    this.ColumnField = value;
                    this.RaisePropertyChanged("Column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Line {
            get {
                return this.LineField;
            }
            set {
                if ((this.LineField.Equals(value) != true)) {
                    this.LineField = value;
                    this.RaisePropertyChanged("Line");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Company : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanCreateRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanGrantPermissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.MetadataEntry[] MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreateRepository {
            get {
                return this.CanCreateRepositoryField;
            }
            set {
                if ((this.CanCreateRepositoryField.Equals(value) != true)) {
                    this.CanCreateRepositoryField = value;
                    this.RaisePropertyChanged("CanCreateRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanGrantPermission {
            get {
                return this.CanGrantPermissionField;
            }
            set {
                if ((this.CanGrantPermissionField.Equals(value) != true)) {
                    this.CanGrantPermissionField = value;
                    this.RaisePropertyChanged("CanGrantPermission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.MetadataEntry[] Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanManageCompaniesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanManageUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanViewStatisticsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlanMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanManageCompanies {
            get {
                return this.CanManageCompaniesField;
            }
            set {
                if ((this.CanManageCompaniesField.Equals(value) != true)) {
                    this.CanManageCompaniesField = value;
                    this.RaisePropertyChanged("CanManageCompanies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanManageUsers {
            get {
                return this.CanManageUsersField;
            }
            set {
                if ((this.CanManageUsersField.Equals(value) != true)) {
                    this.CanManageUsersField = value;
                    this.RaisePropertyChanged("CanManageUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanViewStatistics {
            get {
                return this.CanViewStatisticsField;
            }
            set {
                if ((this.CanViewStatisticsField.Equals(value) != true)) {
                    this.CanViewStatisticsField = value;
                    this.RaisePropertyChanged("CanViewStatistics");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlanMessage {
            get {
                return this.PlanMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.PlanMessageField, value) != true)) {
                    this.PlanMessageField = value;
                    this.RaisePropertyChanged("PlanMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserKey", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class UserKey : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Plan", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Plan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrivateRepoLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal YearPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthPrice {
            get {
                return this.MonthPriceField;
            }
            set {
                if ((this.MonthPriceField.Equals(value) != true)) {
                    this.MonthPriceField = value;
                    this.RaisePropertyChanged("MonthPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateRepoLimit {
            get {
                return this.PrivateRepoLimitField;
            }
            set {
                if ((this.PrivateRepoLimitField.Equals(value) != true)) {
                    this.PrivateRepoLimitField = value;
                    this.RaisePropertyChanged("PrivateRepoLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserLimit {
            get {
                return this.UserLimitField;
            }
            set {
                if ((this.UserLimitField.Equals(value) != true)) {
                    this.UserLimitField = value;
                    this.RaisePropertyChanged("UserLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal YearPrice {
            get {
                return this.YearPriceField;
            }
            set {
                if ((this.YearPriceField.Equals(value) != true)) {
                    this.YearPriceField = value;
                    this.RaisePropertyChanged("YearPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadReport", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class UploadReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Ended {
            get {
                return this.EndedField;
            }
            set {
                if ((this.EndedField.Equals(value) != true)) {
                    this.EndedField = value;
                    this.RaisePropertyChanged("Ended");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Log {
            get {
                return this.LogField;
            }
            set {
                if ((object.ReferenceEquals(this.LogField, value) != true)) {
                    this.LogField = value;
                    this.RaisePropertyChanged("Log");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Started {
            get {
                return this.StartedField;
            }
            set {
                if ((this.StartedField.Equals(value) != true)) {
                    this.StartedField = value;
                    this.RaisePropertyChanged("Started");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageProject", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class PackageProject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HomePageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.PackageVersion VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HomePageUrl {
            get {
                return this.HomePageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.HomePageUrlField, value) != true)) {
                    this.HomePageUrlField = value;
                    this.RaisePropertyChanged("HomePageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.PackageVersion Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageVersion", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class PackageVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.PackageCompilation[] CompilationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.MetadataEntry[] MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceDistributionUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.PackageCompilation[] Compilations {
            get {
                return this.CompilationsField;
            }
            set {
                if ((object.ReferenceEquals(this.CompilationsField, value) != true)) {
                    this.CompilationsField = value;
                    this.RaisePropertyChanged("Compilations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.MetadataEntry[] Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceDistributionUrl {
            get {
                return this.SourceDistributionUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceDistributionUrlField, value) != true)) {
                    this.SourceDistributionUrlField = value;
                    this.RaisePropertyChanged("SourceDistributionUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageCompilation", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class PackageCompilation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BinaryDistributionUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.PackageImageFile[] ImageFilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatformField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BinaryDistributionUrl {
            get {
                return this.BinaryDistributionUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.BinaryDistributionUrlField, value) != true)) {
                    this.BinaryDistributionUrlField = value;
                    this.RaisePropertyChanged("BinaryDistributionUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.PackageImageFile[] ImageFiles {
            get {
                return this.ImageFilesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFilesField, value) != true)) {
                    this.ImageFilesField = value;
                    this.RaisePropertyChanged("ImageFiles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeField, value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Platform {
            get {
                return this.PlatformField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatformField, value) != true)) {
                    this.PlatformField = value;
                    this.RaisePropertyChanged("Platform");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageImageFile", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class PackageImageFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Permissions", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class Permissions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.CompanyPermission[] CompaniesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.ProjectPermission[] ProjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.RepositoryPermission[] RepositoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.VersionPermission[] VersionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.CompanyPermission[] Companies {
            get {
                return this.CompaniesField;
            }
            set {
                if ((object.ReferenceEquals(this.CompaniesField, value) != true)) {
                    this.CompaniesField = value;
                    this.RaisePropertyChanged("Companies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.ProjectPermission[] Projects {
            get {
                return this.ProjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectsField, value) != true)) {
                    this.ProjectsField = value;
                    this.RaisePropertyChanged("Projects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.RepositoryPermission[] Repositories {
            get {
                return this.RepositoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoriesField, value) != true)) {
                    this.RepositoriesField = value;
                    this.RaisePropertyChanged("Repositories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.VersionPermission[] Versions {
            get {
                return this.VersionsField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionsField, value) != true)) {
                    this.VersionsField = value;
                    this.RaisePropertyChanged("Versions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyPermission", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class CompanyPermission : SymbolSource.Server.Management.Client.Permission {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.Company CompanyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.Company Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectPermission", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class ProjectPermission : SymbolSource.Server.Management.Client.Permission {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.Project ProjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.Project Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryPermission", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class RepositoryPermission : SymbolSource.Server.Management.Client.Permission {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.Repository RepositoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.Repository Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionPermission", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    public partial class VersionPermission : SymbolSource.Server.Management.Client.Permission {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.Version VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.Version Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Permission", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Management")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SymbolSource.Server.Management.Client.ProjectPermission))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SymbolSource.Server.Management.Client.RepositoryPermission))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SymbolSource.Server.Management.Client.VersionPermission))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SymbolSource.Server.Management.Client.CompanyPermission))]
    public partial class Permission : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GrantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WriteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Grant {
            get {
                return this.GrantField;
            }
            set {
                if ((this.GrantField.Equals(value) != true)) {
                    this.GrantField = value;
                    this.RaisePropertyChanged("Grant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Read {
            get {
                return this.ReadField;
            }
            set {
                if ((this.ReadField.Equals(value) != true)) {
                    this.ReadField = value;
                    this.RaisePropertyChanged("Read");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Write {
            get {
                return this.WriteField;
            }
            set {
                if ((this.WriteField.Equals(value) != true)) {
                    this.WriteField = value;
                    this.RaisePropertyChanged("Write");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticPeriod", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Model.Statistics")]
    public enum StatisticPeriod : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Day = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Month = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Year = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Statistic", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Model.Statistics")]
    [System.SerializableAttribute()]
    public partial class Statistic : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SymbolSource.Server.Management.Client.StatisticItem[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SymbolSource.Server.Management.Client.StatisticItem[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticItem", Namespace="http://schemas.datacontract.org/2004/07/SymbolSource.Server.Model.Statistics")]
    [System.SerializableAttribute()]
    public partial class StatisticItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://api.symbolsource.org/schemas/webServices", ConfigurationName="WebService.IWebService")]
    public interface IWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/DigestGenerateRequest" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/DigestGenerateRequest" +
            "Response")]
        string DigestGenerateRequest(string realm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/DigestValidateRespons" +
            "e", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/DigestValidateRespons" +
            "eResponse")]
        SymbolSource.Server.Management.Client.Caller DigestValidateResponse(string company, string method, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetImageFileLink", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetImageFileLinkRespo" +
            "nse")]
        string GetImageFileLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetSourceFileLink", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetSourceFileLinkResp" +
            "onse")]
        string GetSourceFileLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.SourceFile sourceFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetSymbolFileLink", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetSymbolFileLinkResp" +
            "onse")]
        string GetSymbolFileLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetDocumentationLink", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetDocumentationLinkR" +
            "esponse")]
        string GetDocumentationLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetPackageLink", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetPackageLinkRespons" +
            "e")]
        string GetPackageLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version, string contentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetImageFile", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetImageFileResponse")]
        SymbolSource.Server.Management.Client.ImageFile GetImageFile(SymbolSource.Server.Management.Client.Caller caller, string name, string symbolHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/LogImageFileFound", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/LogImageFileFoundResp" +
            "onse")]
        void LogImageFileFound(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.ImageFile imageFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/LogImageFileNotFound", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/LogImageFileNotFoundR" +
            "esponse")]
        void LogImageFileNotFound(SymbolSource.Server.Management.Client.Caller caller, string imageFileName, string symbolHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/LogSourceFileFound", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/LogSourceFileFoundRes" +
            "ponse")]
        void LogSourceFileFound(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.SourceFile sourceFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetProjects", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetProjectsResponse")]
        SymbolSource.Server.Management.Client.Project[] GetProjects(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateOrUpdateProject" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateOrUpdateProject" +
            "Response")]
        void CreateOrUpdateProject(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateProject", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateProjectResponse" +
            "")]
        void CreateProject(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateProject", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateProjectResponse" +
            "")]
        void UpdateProject(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteProject", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteProjectResponse" +
            "")]
        void DeleteProject(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetVersions", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetVersionsResponse")]
        SymbolSource.Server.Management.Client.Version[] GetVersions(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateOrUpdateVersion" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateOrUpdateVersion" +
            "Response")]
        void CreateOrUpdateVersion(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateVersion", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateVersionResponse" +
            "")]
        void CreateVersion(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateVersion", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateVersionResponse" +
            "")]
        void UpdateVersion(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteVersion", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteVersionResponse" +
            "")]
        void DeleteVersion(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/SetVersionHidden", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/SetVersionHiddenRespo" +
            "nse")]
        SymbolSource.Server.Management.Client.Version SetVersionHidden(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version, bool hidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetVersionLastList", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetVersionLastListRes" +
            "ponse")]
        SymbolSource.Server.Management.Client.Version[] GetVersionLastList(SymbolSource.Server.Management.Client.Caller caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetPackages", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetPackagesResponse")]
        SymbolSource.Server.Management.Client.Version[] GetPackages(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository, ref SymbolSource.Server.Management.Client.PackageFilter filter, string packageFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetCompilationList", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetCompilationListRes" +
            "ponse")]
        SymbolSource.Server.Management.Client.Compilation[] GetCompilationList(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetImageFileList", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetImageFileListRespo" +
            "nse")]
        SymbolSource.Server.Management.Client.ImageFile[] GetImageFileList(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Compilation compilation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetSourceFileList", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetSourceFileListResp" +
            "onse")]
        SymbolSource.Server.Management.Client.SourceFile[] GetSourceFileList(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetDepedencyList", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetDepedencyListRespo" +
            "nse")]
        SymbolSource.Server.Management.Client.Depedency[] GetDepedencyList(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetImageFileListByRef" +
            "erence", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetImageFileListByRef" +
            "erenceResponse")]
        SymbolSource.Server.Management.Client.ImageFile[] GetImageFileListByReference(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Reference reference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetNodeImageFiles", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetNodeImageFilesResp" +
            "onse")]
        SymbolSource.Server.Management.Client.NodeImageFile[] GetNodeImageFiles(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.NodeImageFile nodeImageFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetCompanies", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetCompaniesResponse")]
        SymbolSource.Server.Management.Client.Company[] GetCompanies(SymbolSource.Server.Management.Client.Caller caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateCompany", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateCompanyResponse" +
            "")]
        void CreateCompany(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateCompany2", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateCompany2Respons" +
            "e")]
        void CreateCompany2(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.UserKey key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateCompany", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateCompanyResponse" +
            "")]
        void UpdateCompany(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteCompany", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteCompanyResponse" +
            "")]
        void DeleteCompany(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetUsers", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetUsersResponse")]
        SymbolSource.Server.Management.Client.User[] GetUsers(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateUser", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateUserResponse")]
        void CreateUser(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.UserKey key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateUser", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateUserResponse")]
        void UpdateUser(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteUser", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteUserResponse")]
        void DeleteUser(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetRepositories", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetRepositoriesRespon" +
            "se")]
        SymbolSource.Server.Management.Client.Repository[] GetRepositories(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateOrUpdateReposit" +
            "ory", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateOrUpdateReposit" +
            "oryResponse")]
        void CreateOrUpdateRepository(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateRepository", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateRepositoryRespo" +
            "nse")]
        void CreateRepository(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateRepository", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/UpdateRepositoryRespo" +
            "nse")]
        void UpdateRepository(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteRepository", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/DeleteRepositoryRespo" +
            "nse")]
        void DeleteRepository(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetPlansByType", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetPlansByTypeRespons" +
            "e")]
        SymbolSource.Server.Management.Client.Plan[] GetPlansByType(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/RemovePlan", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/RemovePlanResponse")]
        void RemovePlan(string name, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreatePlan", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreatePlanResponse")]
        void CreatePlan(string name, string type, decimal monthPrice, decimal yearPrice, int userLimit, int privateRepoLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetUploadReports", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetUploadReportsRespo" +
            "nse")]
        SymbolSource.Server.Management.Client.UploadReport[] GetUploadReports(SymbolSource.Server.Management.Client.Caller caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/UploadPackage", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/UploadPackageResponse" +
            "")]
        SymbolSource.Server.Management.Client.UploadReport UploadPackage(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.PackageProject package, string packageFormat, byte[] packageData, byte[] symbolPackageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetUserPermissions", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetUserPermissionsRes" +
            "ponse")]
        SymbolSource.Server.Management.Client.Permissions GetUserPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetCompanyPermissions" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetCompanyPermissions" +
            "Response")]
        SymbolSource.Server.Management.Client.CompanyPermission[] GetCompanyPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetRepositoryPermissi" +
            "ons", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetRepositoryPermissi" +
            "onsResponse")]
        SymbolSource.Server.Management.Client.RepositoryPermission[] GetRepositoryPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetProjectPermissions" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetProjectPermissions" +
            "Response")]
        SymbolSource.Server.Management.Client.ProjectPermission[] GetProjectPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetVersionPermissions" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetVersionPermissions" +
            "Response")]
        SymbolSource.Server.Management.Client.VersionPermission[] GetVersionPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/SetCompanyPermissions" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/SetCompanyPermissions" +
            "Response")]
        void SetCompanyPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.Company company, SymbolSource.Server.Management.Client.Permission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/SetRepositoryPermissi" +
            "ons", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/SetRepositoryPermissi" +
            "onsResponse")]
        void SetRepositoryPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.Repository repository, SymbolSource.Server.Management.Client.Permission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/SetProjectPermissions" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/SetProjectPermissions" +
            "Response")]
        void SetProjectPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.Project project, SymbolSource.Server.Management.Client.Permission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/SetVersionPermissions" +
            "", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/SetVersionPermissions" +
            "Response")]
        void SetVersionPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.Version version, SymbolSource.Server.Management.Client.Permission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/UserValidate", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/UserValidateResponse")]
        SymbolSource.Server.Management.Client.User UserValidate(SymbolSource.Server.Management.Client.Caller caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/CreateUserByKey", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/CreateUserByKeyRespon" +
            "se")]
        SymbolSource.Server.Management.Client.Caller CreateUserByKey(string company, string type, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetUserByKey", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetUserByKeyResponse")]
        SymbolSource.Server.Management.Client.Caller GetUserByKey(string company, string type, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/SendPasswordMail", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/SendPasswordMailRespo" +
            "nse")]
        void SendPasswordMail(SymbolSource.Server.Management.Client.Caller caller, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/ResetPassword", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/ResetPasswordResponse" +
            "")]
        void ResetPassword(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.UserKey userKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetUserKeys", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetUserKeysResponse")]
        SymbolSource.Server.Management.Client.UserKey[] GetUserKeys(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/AddUserKey", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/AddUserKeyResponse")]
        void AddUserKey(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.UserKey userKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/RemoveUserKey", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/RemoveUserKeyResponse" +
            "")]
        void RemoveUserKey(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.UserKey userKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetUserVisualStudioLi" +
            "nk", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetUserVisualStudioLi" +
            "nkResponse")]
        string GetUserVisualStudioLink(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetAvailableStatistic" +
            "Names", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetAvailableStatistic" +
            "NamesResponse")]
        string[] GetAvailableStatisticNames(SymbolSource.Server.Management.Client.Caller caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/GetStatistic", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/GetStatisticResponse")]
        SymbolSource.Server.Management.Client.Statistic[] GetStatistic(SymbolSource.Server.Management.Client.Caller caller, string[] names, SymbolSource.Server.Management.Client.StatisticPeriod period, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/PaymentPrepare", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/PaymentPrepareRespons" +
            "e")]
        string PaymentPrepare(SymbolSource.Server.Management.Client.Caller caller, string plan, string returnUrl, string cancelUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://api.symbolsource.org/schemas/webServices/IWebService/PaymentDoAction", ReplyAction="http://api.symbolsource.org/schemas/webServices/IWebService/PaymentDoActionRespon" +
            "se")]
        void PaymentDoAction(SymbolSource.Server.Management.Client.Caller caller, string plan, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebServiceChannel : SymbolSource.Server.Management.Client.IWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceClient : System.ServiceModel.ClientBase<SymbolSource.Server.Management.Client.IWebService>, SymbolSource.Server.Management.Client.IWebService {
        
        public WebServiceClient() {
        }
        
        public WebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DigestGenerateRequest(string realm) {
            return base.Channel.DigestGenerateRequest(realm);
        }
        
        public SymbolSource.Server.Management.Client.Caller DigestValidateResponse(string company, string method, string response) {
            return base.Channel.DigestValidateResponse(company, method, response);
        }
        
        public string GetImageFileLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile) {
            return base.Channel.GetImageFileLink(caller, ref imageFile);
        }
        
        public string GetSourceFileLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.SourceFile sourceFile) {
            return base.Channel.GetSourceFileLink(caller, ref sourceFile);
        }
        
        public string GetSymbolFileLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile) {
            return base.Channel.GetSymbolFileLink(caller, ref imageFile);
        }
        
        public string GetDocumentationLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile) {
            return base.Channel.GetDocumentationLink(caller, ref imageFile);
        }
        
        public string GetPackageLink(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version, string contentType) {
            return base.Channel.GetPackageLink(caller, ref version, contentType);
        }
        
        public SymbolSource.Server.Management.Client.ImageFile GetImageFile(SymbolSource.Server.Management.Client.Caller caller, string name, string symbolHash) {
            return base.Channel.GetImageFile(caller, name, symbolHash);
        }
        
        public void LogImageFileFound(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.ImageFile imageFile) {
            base.Channel.LogImageFileFound(caller, imageFile);
        }
        
        public void LogImageFileNotFound(SymbolSource.Server.Management.Client.Caller caller, string imageFileName, string symbolHash) {
            base.Channel.LogImageFileNotFound(caller, imageFileName, symbolHash);
        }
        
        public void LogSourceFileFound(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.SourceFile sourceFile) {
            base.Channel.LogSourceFileFound(caller, sourceFile);
        }
        
        public SymbolSource.Server.Management.Client.Project[] GetProjects(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository) {
            return base.Channel.GetProjects(caller, ref repository);
        }
        
        public void CreateOrUpdateProject(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Project project) {
            base.Channel.CreateOrUpdateProject(caller, ref project);
        }
        
        public void CreateProject(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Project project) {
            base.Channel.CreateProject(caller, ref project);
        }
        
        public void UpdateProject(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Project project) {
            base.Channel.UpdateProject(caller, ref project);
        }
        
        public void DeleteProject(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Project project) {
            base.Channel.DeleteProject(caller, project);
        }
        
        public SymbolSource.Server.Management.Client.Version[] GetVersions(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Project project) {
            return base.Channel.GetVersions(caller, ref project);
        }
        
        public void CreateOrUpdateVersion(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version) {
            base.Channel.CreateOrUpdateVersion(caller, ref version);
        }
        
        public void CreateVersion(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version) {
            base.Channel.CreateVersion(caller, ref version);
        }
        
        public void UpdateVersion(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version) {
            base.Channel.UpdateVersion(caller, ref version);
        }
        
        public void DeleteVersion(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Version version) {
            base.Channel.DeleteVersion(caller, version);
        }
        
        public SymbolSource.Server.Management.Client.Version SetVersionHidden(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version, bool hidden) {
            return base.Channel.SetVersionHidden(caller, ref version, hidden);
        }
        
        public SymbolSource.Server.Management.Client.Version[] GetVersionLastList(SymbolSource.Server.Management.Client.Caller caller) {
            return base.Channel.GetVersionLastList(caller);
        }
        
        public SymbolSource.Server.Management.Client.Version[] GetPackages(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository, ref SymbolSource.Server.Management.Client.PackageFilter filter, string packageFormat) {
            return base.Channel.GetPackages(caller, ref repository, ref filter, packageFormat);
        }
        
        public SymbolSource.Server.Management.Client.Compilation[] GetCompilationList(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Version version) {
            return base.Channel.GetCompilationList(caller, ref version);
        }
        
        public SymbolSource.Server.Management.Client.ImageFile[] GetImageFileList(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Compilation compilation) {
            return base.Channel.GetImageFileList(caller, ref compilation);
        }
        
        public SymbolSource.Server.Management.Client.SourceFile[] GetSourceFileList(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile) {
            return base.Channel.GetSourceFileList(caller, ref imageFile);
        }
        
        public SymbolSource.Server.Management.Client.Depedency[] GetDepedencyList(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.ImageFile imageFile) {
            return base.Channel.GetDepedencyList(caller, ref imageFile);
        }
        
        public SymbolSource.Server.Management.Client.ImageFile[] GetImageFileListByReference(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Reference reference) {
            return base.Channel.GetImageFileListByReference(caller, ref reference);
        }
        
        public SymbolSource.Server.Management.Client.NodeImageFile[] GetNodeImageFiles(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.NodeImageFile nodeImageFile) {
            return base.Channel.GetNodeImageFiles(caller, ref nodeImageFile);
        }
        
        public SymbolSource.Server.Management.Client.Company[] GetCompanies(SymbolSource.Server.Management.Client.Caller caller) {
            return base.Channel.GetCompanies(caller);
        }
        
        public void CreateCompany(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Company company) {
            base.Channel.CreateCompany(caller, company);
        }
        
        public void CreateCompany2(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.UserKey key) {
            base.Channel.CreateCompany2(caller, user, key);
        }
        
        public void UpdateCompany(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Company company) {
            base.Channel.UpdateCompany(caller, company);
        }
        
        public void DeleteCompany(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Company company) {
            base.Channel.DeleteCompany(caller, company);
        }
        
        public SymbolSource.Server.Management.Client.User[] GetUsers(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Company company) {
            return base.Channel.GetUsers(caller, ref company);
        }
        
        public void CreateUser(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.UserKey key) {
            base.Channel.CreateUser(caller, user, key);
        }
        
        public void UpdateUser(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.User user) {
            base.Channel.UpdateUser(caller, ref user);
        }
        
        public void DeleteUser(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user) {
            base.Channel.DeleteUser(caller, user);
        }
        
        public SymbolSource.Server.Management.Client.Repository[] GetRepositories(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Company company) {
            return base.Channel.GetRepositories(caller, ref company);
        }
        
        public void CreateOrUpdateRepository(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository) {
            base.Channel.CreateOrUpdateRepository(caller, ref repository);
        }
        
        public void CreateRepository(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository) {
            base.Channel.CreateRepository(caller, ref repository);
        }
        
        public void UpdateRepository(SymbolSource.Server.Management.Client.Caller caller, ref SymbolSource.Server.Management.Client.Repository repository) {
            base.Channel.UpdateRepository(caller, ref repository);
        }
        
        public void DeleteRepository(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Repository repository) {
            base.Channel.DeleteRepository(caller, repository);
        }
        
        public SymbolSource.Server.Management.Client.Plan[] GetPlansByType(string type) {
            return base.Channel.GetPlansByType(type);
        }
        
        public void RemovePlan(string name, string type) {
            base.Channel.RemovePlan(name, type);
        }
        
        public void CreatePlan(string name, string type, decimal monthPrice, decimal yearPrice, int userLimit, int privateRepoLimit) {
            base.Channel.CreatePlan(name, type, monthPrice, yearPrice, userLimit, privateRepoLimit);
        }
        
        public SymbolSource.Server.Management.Client.UploadReport[] GetUploadReports(SymbolSource.Server.Management.Client.Caller caller) {
            return base.Channel.GetUploadReports(caller);
        }
        
        public SymbolSource.Server.Management.Client.UploadReport UploadPackage(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.PackageProject package, string packageFormat, byte[] packageData, byte[] symbolPackageData) {
            return base.Channel.UploadPackage(caller, package, packageFormat, packageData, symbolPackageData);
        }
        
        public SymbolSource.Server.Management.Client.Permissions GetUserPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user) {
            return base.Channel.GetUserPermissions(caller, user);
        }
        
        public SymbolSource.Server.Management.Client.CompanyPermission[] GetCompanyPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Company company) {
            return base.Channel.GetCompanyPermissions(caller, company);
        }
        
        public SymbolSource.Server.Management.Client.RepositoryPermission[] GetRepositoryPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Repository repository) {
            return base.Channel.GetRepositoryPermissions(caller, repository);
        }
        
        public SymbolSource.Server.Management.Client.ProjectPermission[] GetProjectPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Project project) {
            return base.Channel.GetProjectPermissions(caller, project);
        }
        
        public SymbolSource.Server.Management.Client.VersionPermission[] GetVersionPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.Version version) {
            return base.Channel.GetVersionPermissions(caller, version);
        }
        
        public void SetCompanyPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.Company company, SymbolSource.Server.Management.Client.Permission permission) {
            base.Channel.SetCompanyPermissions(caller, user, company, permission);
        }
        
        public void SetRepositoryPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.Repository repository, SymbolSource.Server.Management.Client.Permission permission) {
            base.Channel.SetRepositoryPermissions(caller, user, repository, permission);
        }
        
        public void SetProjectPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.Project project, SymbolSource.Server.Management.Client.Permission permission) {
            base.Channel.SetProjectPermissions(caller, user, project, permission);
        }
        
        public void SetVersionPermissions(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.Version version, SymbolSource.Server.Management.Client.Permission permission) {
            base.Channel.SetVersionPermissions(caller, user, version, permission);
        }
        
        public SymbolSource.Server.Management.Client.User UserValidate(SymbolSource.Server.Management.Client.Caller caller) {
            return base.Channel.UserValidate(caller);
        }
        
        public SymbolSource.Server.Management.Client.Caller CreateUserByKey(string company, string type, string value) {
            return base.Channel.CreateUserByKey(company, type, value);
        }
        
        public SymbolSource.Server.Management.Client.Caller GetUserByKey(string company, string type, string value) {
            return base.Channel.GetUserByKey(company, type, value);
        }
        
        public void SendPasswordMail(SymbolSource.Server.Management.Client.Caller caller, string url) {
            base.Channel.SendPasswordMail(caller, url);
        }
        
        public void ResetPassword(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.UserKey userKey) {
            base.Channel.ResetPassword(caller, userKey);
        }
        
        public SymbolSource.Server.Management.Client.UserKey[] GetUserKeys(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user) {
            return base.Channel.GetUserKeys(caller, user);
        }
        
        public void AddUserKey(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.UserKey userKey) {
            base.Channel.AddUserKey(caller, user, userKey);
        }
        
        public void RemoveUserKey(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user, SymbolSource.Server.Management.Client.UserKey userKey) {
            base.Channel.RemoveUserKey(caller, user, userKey);
        }
        
        public string GetUserVisualStudioLink(SymbolSource.Server.Management.Client.Caller caller, SymbolSource.Server.Management.Client.User user) {
            return base.Channel.GetUserVisualStudioLink(caller, user);
        }
        
        public string[] GetAvailableStatisticNames(SymbolSource.Server.Management.Client.Caller caller) {
            return base.Channel.GetAvailableStatisticNames(caller);
        }
        
        public SymbolSource.Server.Management.Client.Statistic[] GetStatistic(SymbolSource.Server.Management.Client.Caller caller, string[] names, SymbolSource.Server.Management.Client.StatisticPeriod period, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to) {
            return base.Channel.GetStatistic(caller, names, period, from, to);
        }
        
        public string PaymentPrepare(SymbolSource.Server.Management.Client.Caller caller, string plan, string returnUrl, string cancelUrl) {
            return base.Channel.PaymentPrepare(caller, plan, returnUrl, cancelUrl);
        }
        
        public void PaymentDoAction(SymbolSource.Server.Management.Client.Caller caller, string plan, string token) {
            base.Channel.PaymentDoAction(caller, plan, token);
        }
    }
}
